"""
Django settings for assistant project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import dj_database_url
import pytz
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment
load_dotenv(BASE_DIR / '.env')

ENVIRONMENT = os.getenv('APP_ENV')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('APP_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str(os.getenv('APP_DEBUG', False)) == 'True'

ALLOWED_HOSTS = ["localhost", os.getenv('APP_HOSTNAME')]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'application.apps.ApplicationConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if ENVIRONMENT == 'dev':
    INSTALLED_APPS += ('corsheaders', )
    MIDDLEWARE += ('corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', )
    CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'assistant.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'assistant.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(conn_max_age=600)
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = os.getenv('APP_STATIC_URL', '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

if ENVIRONMENT == 'prod':
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': os.getenv('MEMCACHED_LOCATION'),
        }
    }

PYTZ_TIMEZONE = pytz.timezone(TIME_ZONE)
APP_API_KEY = os.getenv('APP_API_KEY')
GMAPS_GEOCODE_API_KEY = os.getenv('GMAPS_GEOCODE_API_KEY')
FATSECRET_ID = os.getenv('FATSECRET_ID')
FATSECRET_DEVICE_ID = os.getenv('FATSECRET_DEVICE_ID')
FATSECRET_SECRET_KEY = os.getenv('FATSECRET_SECRET_KEY')
FATSECRET_USERAGENT = os.getenv('FATSECRET_USERAGENT')
MYSHOWS_LOGIN = os.getenv('MYSHOWS_LOGIN')
MYSHOWS_TOKEN = os.getenv('MYSHOWS_TOKEN')
SPOTIFY_CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')
SPOTIFY_REDIRECT_URI = os.getenv('SPOTIFY_REDIRECT_URI')
FUEL_CALORIES_TARGET = os.getenv('FUEL_CALORIES_TARGET')
FUEL_PROTEIN_TARGET = os.getenv('FUEL_PROTEIN_TARGET')
FUEL_FAT_TARGET = os.getenv('FUEL_FAT_TARGET')
FUEL_CARBS_TARGET = os.getenv('FUEL_CARBS_TARGET')
MOODBOT_TOKEN = os.getenv('MOODBOT_TOKEN')
MOODBOT_ADMIN_ID = int(os.getenv('MOODBOT_ADMIN_ID'))
MOODBOT_DEFAULTS = {
    "parse_mode": "HTML",
    "tzinfo": PYTZ_TIMEZONE,
    "timeout": 10
}
